<script type="text/x-markdown">
Aims
----

This phase is to be done *individually*. In this phase you will:

- refresh your Python skills and knowledge
- implement simple descriptive statistics using Python
- learn how to represent data using XML and to validate it against a DTD

Introduction
------------

Given a CSV file, you need to find out and calculate the following information for each column:

- **Attribute name**, the column name
- **Data type**: integer, float, or string
  * integer: whole number, e.g. 1, 5 and 23678
  * float: real number that supports decimal point, e.g. 3.14, 777.8 and 1.0
  * string: categorical values, e.g. Male/Female and RAIN/SUNNY/CLOUDY

Calculate the five-number-summaries of each column of the CSV data. Five-number-summary consists of the following.

- **Minimum value**
- **Lower quartile \\(Q_1\\)**
- **Median \\(Q_2\\)**
- **Upper quartile \\(Q_3\\)**
- **Maximum value**

</script>

\[\begin{aligned}
\dot{x} &amp; = \sigma(y-x) \\
\dot{y} &amp; = \rho x &#8211; y &#8211; xz \\
\dot{z} &amp; = -\beta z + xy
\end{aligned} \]

Let n be the number of observations; we arrange the data in ascending order. We define:
median rankquartile rank=n+12=⌊median rank⌋+12,
where ⌊x⌋ is the value of x truncated down to the next smallest whole number.


<script type="text/x-markdown">
Depending on the types, you need also to find the following:

- **Mode**, the most common value in the column
- **Unique values**, unique values of all the column values

Not all information is applicable to all data types. Please use the following guide in producing the output:

- For numerical columns, with float and integer data type, provide *five-number-summary*,
- For string provide *unique values* in the column.
- For integer and string column, find out the *mode*.

Tasks
-----

You need to write a Python program that reads an existing CSV file called `input.csv`. Assume that the first line of the CSV contains the column names. Your program would detect the data type and calculate the **five-number-summary** of each column (or attribute) in the CSV file. The result of this processing should then be written down to an XML file called `output.xml`.

This XML file should be well-formed valid against the following DTD.

```
<!DOCTYPE summary [
  <!ELEMENT summary (attribute*)>
  <!ELEMENT attribute (name, property*, mode?, unique?)>
  <!ELEMENT name (#PCDATA)>
  <!ELEMENT property (#PCDATA)>
  <!ELEMENT mode (#PCDATA)>
  <!ELEMENT unique (value+)>
  <!ELEMENT value (#PCDATA)>
  <!ATTLIST property name (min|q1|median|q3|max) #REQUIRED>
  <!ATTLIST name type (integer|float|string) #REQUIRED>
]>
```

### Requirements

- Your program should be able to identify three data types: *integer*, *float*, and *string*.
- If a column contains data of two different types, the type of the column should be set to the more general one.
 Example: The type of a column with a mix of integer and float should be set as float. A column with float and string values should be set as a string column.
- You should develop your own pure Python implementation of the data-processing. You should not use non-standard Python libraries like `numpy` or `scipy` to produce the five-number-summary. You can use still use Python's `set`, however.
- Several CSV files will be tested against your program. Test your program at least against the following datasets:
  * <a file="data" href="adult.csv"> Census Income Data Set</a>
  * <a file="data" href="wine.csv"> Wine Data Set</a>
  * <a file="data" href="iris.csv"> Iris Data Set</a>

### Marking Scheme

Your program will be marked according to:

- Correctness of the data processing  (4 marks)
- Validity of the XML file (4 marks)
- Quality of implementation (2 marks)

### Submission

**Due Data: Friday Week 4, 5pm**:<br />
**Late penalty: 1 mark for each late day**:

You need to submit a single Python file called `phase1.py`. You can safely assume that `input.csv` can be located in the same directory with your `.py` file. Submit your work through the Submission section of the LMS.

Fail to follow the submission instruction will incur you penalty.

### References

1. Dodge, Y. (2008). Exploratory Data Analysis. The Concise Encyclopedia of Statistics
  , pp 192-194 <a href="http://link.springer.com.ezp.lib.unimelb.edu.au/referenceworkentry/10.1007/978-0-387-32833-1_136/fulltext.html" file="link"></a>.
2. Lichman, M. (2013). UCI Machine Learning Repository. Irvine, CA: University of California, School of Information and Computer Science <a href="http://archive.ics.uci.edu/ml" file="link"></a>.

### Note on Datasets

- Census Income Data Set, Predict whether income exceeds $50K/yr based on census data.<br />
  http://archive.ics.uci.edu/ml/datasets/Adult
- Wine Data Set, Using chemical analysis determine the origin of wines.<br />
  http://archive.ics.uci.edu/ml/datasets/Wine
- Iris Data Set, Famous Iris database (Fisher, 1936).<br />
  http://archive.ics.uci.edu/ml/datasets/Iris
</script>